/**
 * File:	modules/IscsiServer.ycp
 * Package:	Configuration of iscsi-server
 * Summary:	IscsiServer settings, input and output functions
 * Authors:	Michal Zugec <mzugec@suse.cz>
 *
 * $Id$
 *
 * Representation of the configuration of iscsi-server.
 * Input and output routines.
 */

{

module "IscsiServer";
textdomain "iscsi-server";

import "Progress";
import "Report";
import "Summary";
import "Message";
import "Service";
import "Package";
import "Popup";
import "SuSEFirewall";

map <string, any> config_file = $[];
global map<string, any> config = $[];
boolean serviceStatus = false;

/**
 * Prototypes
 */
global boolean Modified();

/**
 * Data was modified?
 */
global boolean modified = false;

/**
 */
global boolean proposal_valid = false;

/**
 * Write only, used during autoinstallation.
 * Don't run services and SuSEconfig, it's all done at one place.
 */
global boolean write_only = false;

/**
 * Abort function
 * return boolean return true if abort
 */
global boolean() AbortFunction = Modified;

/**
 * Abort function
 * @return boolean return true if abort
 */
global define boolean Abort() ``{
    if(AbortFunction != nil)
    {
	return AbortFunction () == true;
    }
    return false;
}

/**
 * Data was modified?
 * @return true if modified
 */
global boolean Modified() {
    y2debug("modified=%1",modified);
    return modified;
}

// Settings: Define all variables needed for configuration of iscsi-server
// TODO FIXME: Define all the variables necessary to hold
// TODO FIXME: the configuration here (with the appropriate
// TODO FIXME: description)
// TODO FIXME: For example:
//   /**
//    * List of the configured cards.
//   list cards = [];
//
//   /**
//    * Some additional parameter needed for the configuration.
//   boolean additional_parameter = true;

boolean readConfig(){
 config_file = (map<string, any>)SCR::Read(.etc.ietd.all);
 string c_scope="auth";
 foreach(map<string, any> row, config_file["value"]:[], {
  if (row["name"]:"" == "Target") {
			c_scope = row["value"]:"";
			config[c_scope] = [ $[ "KEY":"Target", "VALUE":row["value"]:"" ] ];
			}
	else config[c_scope] = add(config[c_scope]:[], $[ "KEY":row["name"]:"", "VALUE":row["value"]:"" ]);
 });
 return true;
}

boolean find_in(map<string, any> my_conf, string to_find){
 boolean ret = false;
 foreach(string key, any value, my_conf, {
  if ( key == to_find ) ret = true;
 });
 return ret;
}

map<string, any> removeKeyFromMap(map<string,any>myMap,string key){
 map <string, any> conf_map = $[];
 foreach(string k, any v, myMap, {
  if (k != key) conf_map[k] = v;
 });
 return conf_map;
}

global map<string, any> removeKey(string key){
 return removeKeyFromMap(config, key);
}

global integer getHighestLun(){
 integer lun = 0;
 foreach(string key, list<map<string, any> > val, (map<string, list<map<string, any> > >)removeKey("auth"), {
  foreach(map<string, any> row,val, {
   if (row["KEY"]:""=="Lun"){
    integer curr_lun = 0;
    curr_lun = tointeger((splitstring(row["VALUE"]:"", " "))[0]:"0");
    if (curr_lun > lun) lun = curr_lun;
   }
  });
 });
 return lun;
}

map<string, any> createMap(map<string, any> old_map, list<string> comments)
{
 string comment = "";
 foreach(string row, comments, {
  comment = sformat("%1%2", comment, row);
  });
 return $[ "name":old_map["KEY"]:"",
           "value":old_map["VALUE"]:"",
           "kind":"value",
           "type":1,
           "comment":comment
         ];
}

list<string> getKeys(map<string, any> searched){
 list<string> keys = [];
 foreach(string s, any a, searched, {
  keys = add(keys, s);
 });
 return keys;
}

map<string, any> addToConfig( map<string, any> m_config_file, string key){
 list <map<string, any> > new_list = [];
 foreach(map<string, any> row, config[key]:[], {
  new_list = add(new_list, createMap(row, []));
 });
 m_config_file[key] = new_list;
 return m_config_file;
}


boolean writeConfig(){
 string c_scope = "auth";
 map<string, any> m_config_file = $[];


 foreach(map<string, any> row, config_file["value"]:[], {
  if ( c_scope=="auth" && row["name"]:"" != "Target" ) { m_config_file["auth"] = add(m_config_file["auth"]:[], row);
   }
  if (row["name"]:"" == "Target"){ 
    c_scope = row["value"]:"";
    m_config_file[c_scope] = add(m_config_file[c_scope]:[], row);
   } else if(c_scope!="auth"){ m_config_file[c_scope] = add(m_config_file[c_scope]:[], row);
  }
 });

 foreach(string old_key, getKeys(config), {
  if(size(config[old_key]:[])==0) config = removeKey(old_key);
 });
 foreach(string old_key, getKeys(config), {
  if(!( contains(getKeys(m_config_file), old_key) )){
   m_config_file = addToConfig( m_config_file, old_key );
  } else {

     map<string, any> comments = $[];
     foreach(map<string, any> old_list, m_config_file[old_key]:[], {
      string key = old_list["name"]:"";
      comments[key] = add(comments[key]:[], old_list["comment"]:"");
      });
     list<map<string, any> > new = [];
     foreach(map<string, any> old_map, config[old_key]:[], {
      string key = old_map["KEY"]:"";
y2internal("%1", comments[key]:nil);
      if (size(comments[key]:[])>0){
      new = add(new,
		createMap(old_map, comments[key]:[]));
      comments = removeKeyFromMap(comments,key);
       } else new = add(new,
			createMap(old_map, comments[key]:[]));
      });
y2internal("%1", new);
	m_config_file[old_key] = new;
    }
 });

 foreach(string old_key, getKeys(m_config_file), {
  if(!( contains(getKeys(config), old_key) )){
   m_config_file = removeKeyFromMap(m_config_file, old_key);
  }
 });

 config_file["value"] = m_config_file["auth"]:[];

 foreach(string key, any val, removeKeyFromMap(m_config_file, "auth"), {
  config_file["value"] = flatten([ config_file["value"]:[], (list<map<string, any> >)val ]);
 });
SCR::Write(.etc.ietd.all, config_file);
SCR::Write(.etc.ietd, nil);

 return true;
}


boolean installed_packages(){
 boolean ret = false;
  if( !Package::InstallMsg( "iscsitarget",
            _("<p>To configure the iSCSI Target, the <b>%1</b> package must be installed.</p>") +
            _("<p>Install it now?</p>")) )
        {
        Popup::Error( Message::CannotContinueWithoutPackagesInstalled() );
    } else ret = true;

 return ret;
}

boolean getServiceStatus(){
 boolean ret = true;
 if (Service::Status("iscsitarget") == 0) serviceStatus=true;
y2internal("Service status = %1", serviceStatus);
 if (!serviceStatus) Service::Start("iscsitarget");
 return ret;
}

boolean setServiceStatus(){
 boolean ret = true;
 if (!serviceStatus) Service::Stop("iscsitarget");
 return ret;
}

/**
 * Read all iscsi-server settings
 * @return true on success
 */
global boolean Read() {

    /* IscsiServer read dialog caption */
    string caption = _("Initializing iSCSI Target Configuration");

    // TODO FIXME Set the right number of stages
    integer steps = 4;

    integer sl = 500;
    sleep(sl);

    // TODO FIXME Names of real stages
    // We do not set help text here, because it was set outside
    Progress::New( caption, " ", steps, [
	    /* Progress stage 1/3 */
	    _("Read the database"),
	    /* Progress stage 2/3 */
	    _("Read the previous settings"),
	    /* Progress stage 3/3 */
	    _("Detect the devices")
	], [
	    /* Progress step 1/3 */
	    _("Reading the database..."),
	    /* Progress step 2/3 */
	    _("Reading the previous settings..."),
	    /* Progress step 3/3 */
	    _("Detecting the devices..."),
	    /* Progress finished */
	    _("Finished")
	],
	""
    );

    // read database
    if(Abort()) return false;
    Progress::NextStage();
    /* Error message */
    if(!installed_packages()) return false;
    sleep(sl);

    // read another database
    if(Abort()) return false;
    Progress::NextStep();
    /* Error message */
    if(!getServiceStatus()) return false;
    sleep(sl);

    // read current settings
    if(Abort()) return false;
    Progress::NextStage();
    /* Error message */
    if(!readConfig()) {
	 Report::Error(Message::CannotReadCurrentSettings());
	 return false;
	}
    sleep(sl);

    // detect devices
//    if(Abort()) return false;
        Progress::set(false);
        SuSEFirewall::Read();
        Progress::set(true);

    Progress::NextStage();
    /* Error message */
    if(false) return false;
    sleep(sl);

    if(Abort()) return false;
    /* Progress finished */
    Progress::NextStage();
    sleep(sl);

    if(Abort()) return false;
    modified = false;
    return true;
}

/**
 * Write all iscsi-server settings
 * @return true on success
 */
global boolean Write() {

    /* IscsiServer read dialog caption */
    string caption = _("Saving iSCSI Target Configuration");

    // TODO FIXME And set the right number of stages
    integer steps = 2;

    integer sl = 500;
    sleep(sl);

    // TODO FIXME Names of real stages
    // We do not set help text here, because it was set outside
    Progress::New(caption, " ", steps, [
	    /* Progress stage 1/2 */
	    _("Write the settings"),
	    /* Progress stage 2/2 */
	    _("Run SuSEconfig")
	], [
	    /* Progress step 1/2 */
	    _("Writing the settings..."),
	    /* Progress step 2/2 */
	    _("Running SuSEconfig..."),
	    /* Progress finished */
	    _("Finished")
	],
	""
    );

    // write settings
//    if(Abort()) return false;

if (Popup::YesNo(_(
"If changes have been made, the iSCSI target is not able \n"
"to reload current configuration. It can only restart.\n"
"When restarting, all sessions are aborted.\n"
"Restart the iscsitarget service?"
))) Service::Restart("iscsitarget");

        Progress::set(false);
        SuSEFirewall::Write();
        Progress::set(true);

    Progress::NextStage();
    /* Error message */
    if(writeConfig()==false) Report::Error (_("Cannot write settings."));
    sleep(sl);

    // run SuSEconfig
    if(Abort()) return false;
    Progress::NextStage ();
    /* Error message */
    if(false) Report::Error (Message::SuSEConfigFailed());
    sleep(sl);

    if(Abort()) return false;
    /* Progress finished */
    Progress::NextStage();
    sleep(sl);

    if(!setServiceStatus()) return false;
    return true;
}

/**
 * Get all iscsi-server settings from the first parameter
 * (For use by autoinstallation.)
 * @param settings The YCP structure to be imported.
 * @return boolean True on success
 */
global boolean Import (map settings) {
    // TODO FIXME: your code here (fill the above mentioned variables)...
    return true;
}

/**
 * Dump the iscsi-server settings to a single map
 * (For use by autoinstallation.)
 * @return map Dumped settings (later acceptable by Import ())
 */
global map Export () {
    // TODO FIXME: your code here (return the above mentioned variables)...
    return $[];
}

/**
 * Create a textual summary and a list of unconfigured cards
 * @return summary of the current configuration
 */
global list Summary() {
    // TODO FIXME: your code here...
    /* Configuration summary text for autoyast */
    return [ _("Configuration summary..."), [] ];
}

/**
 * Create an overview table with all configured cards
 * @return table items
 */
global list Overview() {
    // TODO FIXME: your code here...
    return [];
}

/**
 * Return packages needed to be installed and removed during
 * Autoinstallation to insure module has all needed software
 * installed.
 * @return map with 2 lists.
 */
global map AutoPackages() {
    // TODO FIXME: your code here...
    return $[ "install":[], "remove":[] ];
}

global boolean GetStartService() {

 return Service::Enabled("iscsitarget");
}

global void SetStartService(boolean status) {
 y2milestone("Set service status %1", status);
 if (status == true) Service::Enable("iscsitarget");
        else Service::Disable("iscsitarget");
}


/* EOF */
}
