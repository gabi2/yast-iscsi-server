/**
 * File:	include/iscsi-server/dialogs.ycp
 * Package:	Configuration of iscsi-server
 * Summary:	Dialogs definitions
 * Authors:	Michal Zugec <mzugec@suse.cz>
 *
 * $Id: dialogs.ycp 13879 2004-02-05 11:29:30Z msvec $
 */

{

textdomain "iscsi-server";

import "Label";
import "Wizard";
import "IscsiServer";
import "CWMTab";
import "CWM";
import "CWMServiceStart";
import "CWMFirewallInterfaces";
import "TablePopup";
include "iscsi-server/helps.ycp";


void initTable (string key);
list<string> keys = [];
map <string, any> table_rows = $[];
list valuesTable (map descr);
string Id2Key( map desc, any option_id );
string rowSummary(any option_id, string option_type);
void rowInit (any option_id, string option_type);
void rowStore (any option_id, string option_type);
//void storeTable (string key, map event);
void initGlobal (string key);
void storeGlobal(string option_id, map option_map);
symbol handleTable (string table, map event);
boolean validateAddTarget(string key, map event);
void storeAddTarget(string option_id, map option_map);
void initModify(string key);
string current_tab = "service";
string modify_record = "";

map tabs_descr = $[
        "service":$[
         "header"       : _("Service"),
         "contents"     :
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                "auto_start_up",
                                `VSpacing (2),
                                "firewall",
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                              ),
                          `VStretch()
                        ),
         "widget_names" : [ "auto_start_up", "firewall" ]
         ],
        "global":$[
         "header"       : _("Global"),
         "contents"     :
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
				"global_config",
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                              ),
                          `VStretch()
                        ),
         "widget_names" : [ "global_config" ]
         ],
        "targets":$[
         "header"       : _("Targets"),
         "contents"     :
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                "server_table",
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                               ),
                          `VStretch()
                        ),
         "widget_names" : [ "server_table" ]
        ]

	];

map<string, map <string, any> > widgets = $[
            "auto_start_up" : CWMServiceStart::CreateAutoStartWidget ($[
                "get_service_auto_start" : IscsiServer::GetStartService,
                "set_service_auto_start" : IscsiServer::SetStartService,
                // radio button (starting SLP service - option 1)
                "start_auto_button" : _("When &Booting"),
                // radio button (starting SLP service - option 2)
                "start_manual_button" : _("&Manually"),
                "help" : sformat (CWMServiceStart::AutoStartHelpTemplate (),
                    // part of help text, used to describe radiobuttons (matching starting SLP service but without "&")
                    _("When Booting"),
                    // part of help text, used to describe radiobuttons (matching starting SLP service but without "&")
                    _("Manually")
                ),
            ]),

	"firewall" : CWMFirewallInterfaces::CreateOpenFirewallWidget ($[
	        "services" : [ "open-iscsi" ],
	        "display_details" : true,
	      ]),
     "global_config" : $[
        "widget" : `custom,
        "custom_widget" :
                 `VBox(
                        `Left( `CheckBox(`id(`auth_none),`opt(`notify), _("None Autentification")) ),
                        `VSpacing(2),
                        `Left( `CheckBox(`id(`auth_in),`opt(`notify), _("Incoming Autentification"), true) ),
                        `HBox(
                                `TextEntry(`id(`user_in), _("Username")), `TextEntry(`id(`pass_in), _("Password"))
                          ),
                        `VSpacing(2),
                        `Left( `CheckBox(`id(`auth_out),`opt(`notify), _("Outgoing Autentification"), true) ),
                        `HBox(
                                `TextEntry(`id(`user_out), _("Username")), `TextEntry(`id(`pass_out), _("Password"))
                          )
                  ),
        "init"   : initGlobal,
//        "handle" : handleGlobal,
        "store"  : storeGlobal,
//        "validate_type" : `function,
//        "validate_function" : validateGlobal,
//        "label"  : _("Settings of SLP server"),
        "help" : HELPS["global_config"]:""
        ],
       "server_table" :
           TablePopup::CreateTableDescr (
            $["add_delete_buttons" : true, "up_down_buttons" : false, "unique_keys" : true ],
             $[
              "init" : initTable,
//              "store" : storeTable,
//              "options" : getServerOptions(),
              "ids" : valuesTable,
//              "id2key" : Id2Key,
              "fallback" : $[
//                "init" : rowInit,
//                "store" : rowStore,
//                "summary" : rowSummary,
                        ],
//              "option_delete" : rowDelete,
              "handle" : handleTable,
//              "add_items" : maplist(string k1, any v1, (map<string,any>) getServerOptions(), ``(k1)),
              "help" : HELPS["server_table"]:""
             ]
            ),

     "target-add" : $[
        "widget" : `custom,
        "custom_widget" :
                 `VBox(
		  `TextEntry(`id(`target), _("Target"), "iqn.2001-04.com.example:storage"),
                  `RadioButtonGroup
                    (
                     `id(`auth),
                     `VBox(
		     `Left(`RadioButton(`id(`no), _("No Auth"), true)),
                     `Left(`RadioButton(`id(`in), _("Incoming"))),
                     `Left(`RadioButton(`id(`out), _("Outgoing")))
                     )
                    ),
                  `TextEntry(`id(`pass), _("User Password"), "user password"),
		  `TextEntry(`id(`lun), _("Logical Unit Definition"), "0 Path=/tmp/file,Type=fileio")
                 ),
//        "init"   : initAddTarget,
//        "handle" : handleAddTarget,
        "store"  : storeAddTarget,
        "validate_type" : `function,
        "validate_function" : validateAddTarget,
//        "label"  : _("Settings of SLP server"),
        "help" : HELPS["target-add"]:""
        ],
     "target-modify" : $[
        "widget" : `custom,
        "custom_widget" :
                 `VBox(
		  `ReplacePoint(`id(`r_target), `TextEntry(`id(`target), _("Target")) ),
                  `RadioButtonGroup
                    (
                     `id(`auth),
                     `VBox(
		     `Left(`RadioButton(`id(`no), _("No Auth"), true)),
                     `Left(`RadioButton(`id(`in), _("Incoming"))),
                     `Left(`RadioButton(`id(`out), _("Outgoing")))
                     )
                    ),
                  `ReplacePoint(`id(`r_pass), `TextEntry(`id(`pass), _("User Password")) ),
		  `ReplacePoint(`id(`r_lun), `TextEntry(`id(`lun), _("Logical Unit Definition")) )
                 ),
        "init"   : initModify,
//        "handle" : handleAddTarget,
        "store"  : storeAddTarget,
//        "validate_type" : `function,
//        "validate_function" : validateAddTarget,
//        "label"  : _("Settings of SLP server"),
        "help" : HELPS["target-modify"]:""
        ],
	];

define void initTable (string key) ``{
    keys = [];
    foreach(string key, any value, IscsiServer::config, {
     keys = add(keys, key);
    });
    TablePopup::TableInit (CWM::GetProcessedWidget (), key);
}

define list valuesTable (map descr) {
  return keys;
}

/*
define void storeTable (string key, map event) ``{
}
*/

void initGlobal (string key){
 if (size(IscsiServer::auth)>0)
  {
   if (IscsiServer::auth["KEY"]:""=="IncomingUser") UI::ChangeWidget(`id(`auth), `CurrentButton, `in);
	else if (IscsiServer::auth["KEY"]:""=="OutgoingUser") UI::ChangeWidget(`id(`auth), `CurrentButton, `out);
   UI::ChangeWidget(`id(`pass), `Value, IscsiServer::auth["VALUE"]:"");
  }
}

void storeGlobal(string option_id, map option_map){
/*
 if (event["EventReason"]:"" == "ValueChanged"){
 boolean status = false;
 switch((symbol)event["ID"]:nil){
  case(`auth_none):
                status = (boolean)UI::QueryWidget(`id(`auth_none), `Value);
                setAuthIn(!status);
                setAuthOut(!status);
                break;
  case(`auth_in):
                status = (boolean)UI::QueryWidget(`id(`auth_in), `Value);
                setAuthIn(status);
                break;
  case(`auth_out):
                status = (boolean)UI::QueryWidget(`id(`auth_out), `Value);
                setAuthOut(status);
                break;
  }
 }
 return nil;
*/

 if ( size( tostring(UI::QueryWidget(`id(`pass), `Value)) )>0 ){
  switch((symbol)UI::QueryWidget(`id(`auth), `CurrentButton)){
   case(`in)	:
		IscsiServer::auth["KEY"] = "IncomingUser";
		IscsiServer::auth["VALUE"] = tostring(UI::QueryWidget(`id(`pass), `Value));
		break;
   case(`out)	:
		IscsiServer::auth["KEY"] = "OutgoingUser";
		IscsiServer::auth["VALUE"] = tostring(UI::QueryWidget(`id(`pass), `Value));
		break;
   case(`no)	:
		IscsiServer::auth = $[];
                break;
  }
 } else IscsiServer::auth = $[];
}

symbol handleTable (string table, map event){
 symbol ret = nil;
 switch((symbol)event["ID"]:nil){
  case(`_tp_add)	:
		y2internal("add");
		ret = `add;
		break;
  case(`_tp_edit)        :
		modify_record = tostring( UI::QueryWidget(`id(`_tp_table), `CurrentItem) );
		ret = `edit;
		break;
  case(`_tp_delete)        :
		if (Popup::ContinueCancel(_("Really delete this item?"))){
		 string del=tostring(UI::QueryWidget(`id(`_tp_table), `CurrentItem));
		 IscsiServer::config = filter(string key, any value, IscsiServer::config, {return (key != del);});
		    keys = [];
		    foreach(string key, any value, IscsiServer::config, {
		     keys = add(keys, key);
		    });
		 TablePopup::TableInit (CWM::GetProcessedWidget (), table);
		}
		break;
 }
 return ret;
}

boolean if_exists(string key, string value){
 boolean ret = false;
 foreach(string target, any row,IscsiServer::config, {
  foreach( map<string, any> v, (list<map<string, any> >)row, {
   if ( v["KEY"]:"" == key && v["VALUE"]:"" == value){
    ret = true;
    break;
   }
  });
 });
 return ret;
}

boolean validateAddTarget(string key, map event){
 string target = tostring( UI::QueryWidget(`id(`target), `Value)    );
 string pass = tostring(   UI::QueryWidget(`id(`pass), `Value)      );
 string lun = tostring(    UI::QueryWidget(`id(`lun), `Value)       );
 string type = "no";

 switch( (symbol)UI::QueryWidget(`id(`auth), `CurrentButton) ){
  case(`in)  : type = "in";
		break;
  case(`out) : type = "out";
		break;
 }

 if (( size(target)==0 && (Popup::Error(_("Target cannot be Empty"))==nil) ) ||
	( if_exists("Target", target) && (Popup::Error(_("Target already exists"))==nil) )){
  UI::SetFocus(`id(`target));
  return false;
 }

 if (type != "no" && size(pass)==0){
  Popup::Error(_("Username and password cannot be empty."));
  UI::SetFocus(`id(`pass));
  return false;
 }

 if ((size(lun)==0 && (Popup::Error(_("Logical unit definition cannot be empty."))==nil))||
	( if_exists("Lun", lun) && (Popup::Error(_("Logical unit already exists."))==nil))){
  UI::SetFocus(`id(`lun));
  return false;
 }
 return true;
}

define void storeAddTarget(string option_id, map option_map){
 string target = tostring( UI::QueryWidget(`id(`target), `Value)    );
 string pass = tostring(   UI::QueryWidget(`id(`pass), `Value)      );
 string lun = tostring(    UI::QueryWidget(`id(`lun), `Value)       );

  IscsiServer::config[target] = [
				 $[ "KEY":"Target", "VALUE":target ],
				 $[ "KEY":"Lun", "VALUE":lun ]
				];

 switch( (symbol)UI::QueryWidget(`id(`auth), `CurrentButton) ){
  case(`in)  : IscsiServer::config[target] = add(IscsiServer::config[target]:[], $[ "KEY":"IncomingUser", "VALUE":pass ]);
                break;
  case(`out) : IscsiServer::config[target] = add(IscsiServer::config[target]:[], $[ "KEY":"OutgoingUser", "VALUE":pass ]);
                break;
 }
}

define void initModify (string key) ``{
 foreach( map<string, any> row, (list<map<string, any> >) IscsiServer::config[modify_record]:[], {
  y2internal("%1", row);
  switch(row["KEY"]:""){
   case("Target")	:
				UI::ReplaceWidget(`id(`r_target), `TextEntry(`id(`target), _("Target"), row["VALUE"]:"") );
				UI::ChangeWidget( `id(`r_target), `Enabled, false);
				break;
   case("Lun")		:
                                UI::ReplaceWidget(`id(`r_lun), `TextEntry(`id(`lun), _("Logical Unit Definition"), row["VALUE"]:"") );
                                break;
   case("IncomingUser")	:
				UI::ChangeWidget( `id(`auth), `CurrentButton, `in);
				UI::ReplaceWidget(`id(`r_pass), `TextEntry(`id(`pass), _("User Password"), row["VALUE"]:"") );
                                break;
   case("OutgoingUser")	:
				UI::ChangeWidget( `id(`auth), `CurrentButton, `out);
				UI::ReplaceWidget(`id(`r_pass), `TextEntry(`id(`pass), _("User Password"), row["VALUE"]:"") );
                                break;
  }
 });
}

/**
 * Summary dialog
 * @return dialog result
 */
any SummaryDialog() {
    string caption = _("iSCSI Server Overview");

    map widget_descr = $[
        "tab": CWMTab::CreateWidget($[
            "tab_order": [ "service", "global", "targets" ],
            "tabs": tabs_descr,
            "widget_descr": widgets,
            "initial_tab" : current_tab,
            "tab_help" : _("<h1>iSCSI Server</h1>"),
        ]),
    ];
    term contents = `VBox( "tab"/*, `VStretch ()*/);

    list<map <string, any> > w = CWM::CreateWidgets (["tab"], (map <string, map <string, any> >)widget_descr);
    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);

    Wizard::SetContentsButtons(caption, contents, help, Label::NextButton (), Label::FinishButton ());
    Wizard::HideBackButton();

    symbol ret = CWM::Run(w, $[`abort:ReallyAbort ]);

    return ret;
}

any AddDialog(){
     current_tab = "targets";
    string caption = _("Add iSCSI Target");
    list<map <string, any> > w = CWM::CreateWidgets (["target-add"], (map <string, map <string, any> >)widgets);
        term contents =
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                w[0, "widget"]:`VSpacing (1),
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                               ),
                          `VStretch()
                        );

    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);
    Wizard::SetContentsButtons(caption, contents, HELPS["target-add"]:"",
            Label::BackButton(), Label::NextButton());

    any ret = CWM::Run(w, $[`abort:ReallyAbort ]);
    return ret;
}

any EditDialog(){
     current_tab = "targets";
    string caption = _("Modify iSCSI Target");
    list<map <string, any> > w = CWM::CreateWidgets (["target-modify"], (map <string, map <string, any> >)widgets);
        term contents =
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                w[0, "widget"]:`VSpacing (1),
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                               ),
                          `VStretch()
                        );

    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);
    Wizard::SetContentsButtons(caption, contents, HELPS["target-modify"]:"",
            Label::BackButton(), Label::NextButton());

    any ret = CWM::Run(w, $[`abort:ReallyAbort ]);
    return ret;
}

/* EOF */
}
