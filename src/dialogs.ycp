/**
 * File:	include/iscsi-server/dialogs.ycp
 * Package:	Configuration of iscsi-server
 * Summary:	Dialogs definitions
 * Authors:	Michal Zugec <mzugec@suse.cz>
 *
 * $Id$
 */

{

textdomain "iscsi-server";

import "Label";
import "Wizard";
import "IscsiServer";
import "CWMTab";
import "CWM";
import "CWMServiceStart";
import "CWMFirewallInterfaces";
import "TablePopup";

include "iscsi-server/helps.ycp";
include "iscsi-server/widgets.ycp";

// store current here
string current_tab = "service";

map tabs_descr = $[
// first tab - service status and firewall
        "service":$[
         "header"       : _("Service"),
         "contents"     :
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                "auto_start_up",
                                `VSpacing (2),
                                "firewall",
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                              ),
                          `VStretch()
                        ),
         "widget_names" : [ "auto_start_up", "firewall" ]
         ],
// second tab - global authentication
        "global":$[
         "header"       : _("Global"),
         "contents"     :
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
				"global_config",
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                              ),
                          `VStretch()
                        ),
         "widget_names" : [ "global_config" ]
         ],
// third tab - targets / luns
        "targets":$[
         "header"       : _("Targets"),
         "contents"     :
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                "server_table",
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                               ),
                          `VStretch()
                        ),
         "widget_names" : [ "server_table" ]
        ]

	];



map<string, map <string, any> > widgets = $[
            "auto_start_up" : CWMServiceStart::CreateAutoStartWidget ($[
                "get_service_auto_start" : IscsiServer::GetStartService,
                "set_service_auto_start" : IscsiServer::SetStartService,
                // radio button (starting iscsitarget service - option 1)
                "start_auto_button" : _("When &Booting"),
                // radio button (starting iscsitarget service - option 2)
                "start_manual_button" : _("&Manually"),
                "help" : sformat (CWMServiceStart::AutoStartHelpTemplate (),
                    // part of help text, used to describe radiobuttons (matching starting iscsitarget service but without "&")
                    _("When Booting"),
                    // part of help text, used to describe radiobuttons (matching starting iscsitarget service but without "&")
                    _("Manually")
                ),
            ]),

	// firewall
	"firewall" : CWMFirewallInterfaces::CreateOpenFirewallWidget ($[
	        "services" : [ "iscsi-server" ],
	        "display_details" : true,
	      ]),

	// discovery authentication dialog
     "global_config" : $[
        "widget" : `custom,
        "custom_widget" :
                 `VBox(
                        `Left( `CheckBox(`id(`auth_none),`opt(`notify), _("No Authentication"), true) ),
                        `VSpacing(2),
                        `Left( `CheckBox(`id(`auth_in),`opt(`notify), _("Incoming Authentication"), false) ),
                        `VBox(
				`Table(`id(`incoming_table),
					`header(_("Username"), _("Password")),
					 []
				),
			  `Left(
			     `HBox(
				`PushButton(`id(`add), _("Add")),
				`PushButton(`id(`edit), _("Edit")),
				`PushButton(`id(`delete), _("Delete"))
				)
			      )
                          ),
                        `VSpacing(2),
                        `Left( `CheckBox(`id(`auth_out),`opt(`notify), _("Outgoing Authentication"), false) ),
                        `HBox(
                                `TextEntry(`id(`user_out), _("Username")), `Password(`id(`pass_out), _("Password"))
                          )
                  ),
        "init"   : initGlobal,
        "handle" : handleAuth,
        "store"  : storeGlobal,
        "validate_type" : `function,
        "validate_function" : validateGlobal,
        "help" : HELPS["global_config"]:""
        ],

	// targets dialog
       "server_table" : $[
		"widget" : `custom,
		"custom_widget" :
		`VBox(
			`Table(`id(`server),
				`header(_("Targets")),
				[]),
		 `Left(
		  `HBox(
		      `PushButton(`id(`add), _("Add")),
		      `PushButton(`id(`edit), _("Edit")),
		      `PushButton(`id(`del), _("Delete"))
		       )
		      )
		     ),
		"init"	: initTable,
		"handle" : handleTable,
		"help" : HELPS["server_table"]:""
	],

	// dialog for add new target
     "target-add" : $[
        "widget" : `custom,
        "custom_widget" :
                 `VBox(
		  `HBox(
			  `TextEntry(`id(`target), _("Target"), "iqn.2001-04.com.example"),
			  `TextEntry(`id(`identifier), _("Identifier"), "test")
			),
                        `VBox(
				`Table(`id(`lun_table),
					`header(_("LUN"), _("Value")),
					 []
				),
			  `Left(
			     `HBox(
				`PushButton(`id(`add), _("Add")),
				`PushButton(`id(`edit), _("Edit")),
				`PushButton(`id(`delete), _("Delete"))
				)
			      )
                          ),
			`Left( `PushButton(`id(`expert), _("Expert Settings")) )
                 ),

        "init"   : initAddTarget,
        "store"  : storeAddTarget,
	"handle" : handleAddTarget,
        "validate_type" : `function,
        "validate_function" : validateAddTarget,
        "help" : HELPS["target-add"]:""
        ],

	// dialog for expert settings
     "expert" : $[
        "widget" : `custom,
        "custom_widget" :
                 `VBox(
                        `VBox(
				`Table(`id(`expert_table),
					`header(_("Key"), _("Value")),
					 []
				),
			  `Left(
			     `HBox(
				`PushButton(`id(`add), _("Add")),
				`PushButton(`id(`edit), _("Edit")),
				`PushButton(`id(`delete), _("Delete"))
				)
			      )
                          )
                  ),
//        "init"   : initGlobal,
//        "handle" : handleAuth,
//        "store"  : storeGlobal,
        "help" : HELPS["expert"]:""
        ],

	// dialog for LUN details
     "lun-details" : $[
        "widget" : `custom,
        "custom_widget" :
                 `VBox(
			`Left( `HWeight(3,  `TextEntry( `id( `lun ), "LUN", "0" )) ),
			`VSpacing(2),
			`RadioButtonGroup(`id(`rb),                           `VBox(
			   `Left( `RadioButton(`id(`fileio), `opt(`notify), "Type=fileio", true) ),
			   `HBox(
				`TextEntry( `id( `file_path ), _("Path:") ),
				`PushButton(`id(`browse), _("Browse"))
				),
			   `TextEntry( `id( `scsi_id ), _("SCSI ID:") ),
			`VSpacing(2),

			   `Left( `RadioButton(`id(`nullio), `opt(`notify), "Type=nullio") ),
			   `TextEntry( `id( `sectors ), _("Sectors:") )
			  )
			 )
		  ),
//        "init"   : initLUN,
        "handle" : handleLUN,
//        "store"  : storeLUN,
        "help" : HELPS["lun-details"]:""
        ],

	// dialog for add/edit authentication for target
     "target-auth" : $[
        "widget" : `custom,
        "custom_widget" :
                 `VBox(
                        `Left( `CheckBox(`id(`auth_none),`opt(`notify), _("No Authentication"), true) ),
                        `VSpacing(2),
                        `Left( `CheckBox(`id(`auth_in),`opt(`notify), _("Incoming Authentication"), false) ),
                        `VBox(
				`Table(`id(`incoming_table),
					`header(_("Username"), _("Password")),
					 []
				),
			  `Left(
			     `HBox(
				`PushButton(`id(`add), _("Add")),
				`PushButton(`id(`edit), _("Edit")),
				`PushButton(`id(`delete), _("Delete"))
				)
			      )
                          ),
                        `VSpacing(2),
                        `Left( `CheckBox(`id(`auth_out),`opt(`notify), _("Outgoing Authentication"), false) ),
                        `HBox(
                                `TextEntry(`id(`user_out), _("Username")), `Password(`id(`pass_out), _("Password"))
                          )
                  ),
        "init"   : initGlobal,
        "handle" : handleAuth,
        "store"  : storeGlobal,
        "validate_type" : `function,
        "validate_function" : validateGlobal,
        "help" : HELPS["global_config"]:""
        ],

	// dialog for modifying target
     "target-modify" : $[
        "widget" : `custom,
        "custom_widget" :
                 `VBox(
                 `HBox(
                          `TextEntry(`id(`target), _("Target")),
                          `TextEntry(`id(`identifier), _("Identifier"))
                        ),
                  `HBox(
                          `TextEntry(`id(`lun), _("LUN")),
                          `TextEntry(`id(`path), _("Path"))
                        )
                 ),
        "init"   : initModify,
        "store"  : storeAddTarget,
        "help" : HELPS["target-modify"]:""
        ]
	];




/**
 * Summary dialog
 * @return dialog result
 */
// Main dialog - tabbed
any SummaryDialog() {
    string caption = _("iSCSI Target Overview");
    curr_target = "";
    map widget_descr = $[
        "tab": CWMTab::CreateWidget($[
            "tab_order": [ "service", "global", "targets" ],
            "tabs": tabs_descr,
            "widget_descr": widgets,
            "initial_tab" : current_tab,
            "tab_help" : _("<h1>iSCSI Target</h1>"),
        ]),
    ];
    term contents = `VBox( "tab" );
    list<map <string, any> > w = CWM::CreateWidgets (["tab"], (map <string, map <string, any> >)widget_descr);
    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);

    Wizard::SetContentsButtons(caption, contents, help, Label::NextButton (), Label::FinishButton ());
    Wizard::HideBackButton();

    symbol ret = CWM::Run(w, $[`abort:ReallyAbort ]);
    return ret;
}

// dialog for add target
any AddDialog(){
     current_tab = "targets";
    string caption = _("Add iSCSI Target");
    list<map <string, any> > w = CWM::CreateWidgets (["target-add"], (map <string, map <string, any> >)widgets);
        term contents =
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                w[0, "widget"]:`VSpacing (1),
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                               ),
                          `VStretch()
                        );

    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);
    Wizard::SetContentsButtons(caption, contents, HELPS["target-add"]:"",
            Label::BackButton(), Label::NextButton());

    any ret = CWM::Run(w, $[`abort:ReallyAbort ]);
    return ret;
}

// discovery authentication dialog
any AuthDialog(){
     current_tab = "targets";
    string caption = _("Modify iSCSI Target");
    list<map <string, any> > w = CWM::CreateWidgets (["target-auth"], (map <string, map <string, any> >)widgets);
        term contents =
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                w[0, "widget"]:`VSpacing (1),
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                               ),
                          `VStretch()
                        );

    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);
    Wizard::SetContentsButtons(caption, contents, HELPS["global_config"]:"",
            Label::BackButton(), Label::NextButton());

    any ret = CWM::Run(w, $[`abort:ReallyAbort ]);
    return ret;
}

// edit target dialog
any EditDialog(){
     current_tab = "targets";
    string caption = _("Modify iSCSI Target");
    list<map <string, any> > w = CWM::CreateWidgets (["target-modify"], (map <string, map <string, any> >)widgets);
        term contents =
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                w[0, "widget"]:`VSpacing (1),
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                               ),
                          `VStretch()
                        );

    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);
    Wizard::SetContentsButtons(caption, contents, HELPS["target-modify"]:"",
            Label::BackButton(), Label::NextButton());

    any ret = CWM::Run(w, $[`abort:ReallyAbort ]);
    return ret;
}

// expert target dialog
any ExpertDialog(){
    string caption = _("iSCSI Target Expert Settings");
    list<map <string, any> > w = CWM::CreateWidgets (["expert"], (map <string, map <string, any> >)widgets);
        term contents =
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                w[0, "widget"]:`VSpacing (1),
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                               ),
                          `VStretch()
                        );

    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);
    Wizard::SetContentsButtons(caption, contents, HELPS["expert"]:"",
            Label::BackButton(), Label::NextButton());

    any ret = CWM::Run(w, $[`abort:ReallyAbort ]);
    return ret;
}

// LUN details
any LUNDialog(){
    string caption = _("iSCSI Target LUN details");
    list<map <string, any> > w = CWM::CreateWidgets (["lun-details"], (map <string, map <string, any> >)widgets);
        term contents =
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                w[0, "widget"]:`VSpacing (1),
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                               ),
                          `VStretch()
                        );

    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);
    Wizard::SetContentsButtons(caption, contents, HELPS["lun-details"]:"",
            Label::BackButton(), Label::NextButton());

    any ret = CWM::Run(w, $[`abort:ReallyAbort ]);
    return ret;
}


/* EOF */
}
