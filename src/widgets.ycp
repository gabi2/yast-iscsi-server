{

textdomain "iscsi-server";
import "IscsiServerFunctions";

//	**************** global funcions and variables	*****
string curr_target = "";
string modify_record = "";
map inc_auth = $[];

void setAuthIn(boolean status){
 UI::ChangeWidget(`id(`incoming_table),`Enabled, status );
 UI::ChangeWidget(`id(`auth_in),`Value, status );

 UI::ChangeWidget(`id(`add),`Enabled, status );
 UI::ChangeWidget(`id(`edit),`Enabled, status );
 UI::ChangeWidget(`id(`delete),`Enabled, status );

 if(status) UI::ChangeWidget(`id(`auth_none),`Value, !status );
}

void setAuthOut(boolean status){
 UI::ChangeWidget(`id(`user_out),`Enabled, status );
 UI::ChangeWidget(`id(`pass_out),`Enabled, status );
 UI::ChangeWidget(`id(`auth_out),`Value, status );
 if(status) UI::ChangeWidget(`id(`auth_none),`Value, !status );
}

list<string> getIncomingValues(){
 list <string> values = [];
 if ((boolean)UI::QueryWidget(`id(`auth_in), `Value) == true){
 integer count = -1;
 while (count<size(inc_auth)-1){
   count = count+1;
   values=add(values, sformat("%1 %2", inc_auth[count, "USER"]:"", inc_auth[count, "PASS"]:""));
  }
  return values;
 } else return [];
}

string getOutgoingValues(){
 if ((boolean)UI::QueryWidget(`id(`auth_out), `Value) == true){
   return sformat("%1 %2", UI::QueryWidget(`id(`user_out), `Value), UI::QueryWidget(`id(`pass_out), `Value) );
 } else return "";
}

list <string> getDialogValues(string user, string pass){
 UI::OpenDialog( `VBox(
		   `TextEntry(`id(`p_user),_("Username"), user),
		   `Password(`id(`p_pass), _("Password"), pass),
		   `HBox(
			`PushButton(`id(`ok), _("OK")),
			`PushButton(`id(`cancel),_("Cancel")))
			)
                );
	boolean cycle = true;
	while(cycle){
	switch((symbol) UI::UserInput()){
	 case(`ok):
		user = tostring( UI::QueryWidget(`id(`p_user), `Value) );
		pass = tostring( UI::QueryWidget(`id(`p_pass), `Value) );
		UI::CloseDialog();
		cycle = false;
		break;
	 case(`cancel):
		cycle = false;
		UI::CloseDialog();
		break;
	 }
	}
 if (size(user)>0 && size(pass)>0) return [user, pass];
	else return [];
}

//	**************** Server Dialog	*********************

void initTable (string key) ``{
    integer count = 0;
    list <term> inc_items = [];
 if (size(IscsiServerFunctions::getTargets())>0){
    foreach(string key, any value, IscsiServerFunctions::getTargets(), {
     inc_items = add(inc_items, `item(`id(count), key));
     count = count + 1;
    });
  }
  UI::ChangeWidget(`id(`server), `Items, inc_items);
}

symbol handleTable (string table, map event){
 symbol ret = nil;
 if(event["EventReason"]:"" == "Activated"){
 switch((symbol)event["ID"]:nil){
  case(`add)        :
                ret = `add;
                break;
  case(`del)        :
                if (Popup::ContinueCancel(_("Really delete this item?"))){
                 integer del=tointeger( UI::QueryWidget(`id(`server), `CurrentItem) );
                 IscsiServerFunctions::removeItem( ((term)UI::QueryWidget(`id(`server), `Item(del)))[1]:"" );
		 initTable("");
                }
                break;
  case(`edit)	:
		integer edit=tointeger( UI::QueryWidget(`id(`server), `CurrentItem) );
		curr_target = ((term)UI::QueryWidget(`id(`server), `Item(edit)))[1]:"";
		ret = `edit;
		break;
  }
 }
 return ret;
}

list <term> getAuthItems(){
 list <term> inc_items = [];
 integer count = -1;
 while (count<size(inc_auth)-1){
  count = count+1;
  inc_items = add(inc_items, `item(`id(count),inc_auth[count, "USER"]:"", "*****"));
 }
 return inc_items;
}

//	**************** Global Dialog	*********************
void initGlobalValues(list<map<string, any> > values){
y2internal("values %1", values);
  setAuthIn(false);
  setAuthOut(false);
   string user = "";
   string pass = "";
   inc_auth = $[];
   integer count = 0;
   foreach(map<string,any> auth, values, {
    if (auth["KEY"]:"" == "IncomingUser") {
	user = splitstring(auth["VALUE"]:"", " ")[0]:"";
	pass = splitstring(auth["VALUE"]:"", " ")[1]:"";
	inc_auth[count] = $["USER":user, "PASS":pass];
	count = count + 1;
	setAuthIn(true);
    }
    if (auth["KEY"]:"" == "OutgoingUser") {
	UI::ChangeWidget(`id(`user_out), `Value, splitstring(auth["VALUE"]:"", " ")[0]:"");
	UI::ChangeWidget(`id(`pass_out), `Value, splitstring(auth["VALUE"]:"", " ")[1]:"");
	setAuthOut(true);
    }
   });
   UI::ChangeWidget(`id(`incoming_table), `Items, getAuthItems() );
}

void initGlobal (string key){
 if (size(curr_target)>0) initGlobalValues(IscsiServerFunctions::getConfig()[curr_target]:[]);
	else if (size(IscsiServerFunctions::getConfig()["auth"]:[])>0) initGlobalValues(IscsiServerFunctions::getConfig()["auth"]:[]);
}

void storeGlobal(string option_id, map option_map){
 if (size(curr_target)>0){
 IscsiServerFunctions::setTargetAuth( curr_target, getIncomingValues(), getOutgoingValues() );
 } else{
	IscsiServerFunctions::setAuth( getIncomingValues(), getOutgoingValues() );
 }
}

//	************** Add Target Dialog	******************
void initAddTarget(string key){
 string target = "iqn";
 string date = ((map<string, any>)SCR::Execute(.target.bash_output, "date +%Y-%m"))["stdout"]:"";
 string domain = ((map<string, any>)SCR::Execute(.target.bash_output, "dnsdomainname"))["stdout"]:"";
 string uuid = ((map<string, any>)SCR::Execute(.target.bash_output, "uuidgen"))["stdout"]:"";
 if (size(domain)>0){
  domain = (splitstring(domain, "\n"))[0]:"";
  list<string> tmp_list=splitstring(domain, ".");
  domain = sformat("%1.%2", tmp_list[1]:"", tmp_list[0]:"");
 } else domain="com.example";
 target = deletechars(sformat("%1.%2.%3", target, date, domain), "\n");

 UI::ChangeWidget(`id(`target), `Value, target);
 UI::ChangeWidget(`id(`identifier), `Value, uuid);
 UI::ChangeWidget(`id(`lun), `Value, tostring(IscsiServerFunctions::getNextLun()) );
}

void storeAddTarget(string option_id, map option_map){
 list<map<string, any> > old = [];
 string target = tostring( sformat("%1:%2",UI::QueryWidget(`id(`target), `Value), UI::QueryWidget(`id(`identifier), `Value)) );
 string lun = sformat("%1 Path=%2,Type=fileio",UI::QueryWidget(`id(`lun), `Value), UI::QueryWidget(`id(`path), `Value) );
 IscsiServerFunctions::addTarget(target, lun);
 curr_target = target;
}

boolean validateAddTarget(string key, map event){
 string target = tostring( UI::QueryWidget(`id(`target), `Value)    );
 string lun = tostring(    UI::QueryWidget(`id(`lun), `Value)       );
 string type = "no";
 if (( size(target)==0 && (Popup::Error(_("The target cannot be empty."))==nil) ) ||
        ( IscsiServerFunctions::ifExists("Target", target) && (Popup::Error(_("The target already exists."))==nil) )){
  UI::SetFocus(`id(`target));
  return false;
 }
 if ((size(lun)==0 && (Popup::Error(_("The logical unit definition cannot be empty."))==nil))||
        ( IscsiServerFunctions::ifExists("Lun", lun) && (Popup::Error(_("The logical unit already exists."))==nil))){
  UI::SetFocus(`id(`lun));
  return false;
 }
 return true;
}

//	**************** Target Auth	*******************

symbol handleAuth(string key, map event){
 if (event["EventReason"]:"" == "ValueChanged"){
 boolean status = false;
 switch((symbol)event["ID"]:nil){
  case(`auth_none):
                status = (boolean)UI::QueryWidget(`id(`auth_none), `Value);
                setAuthIn(!status);
                setAuthOut(!status);
                break;
  case(`auth_in):
                status = (boolean)UI::QueryWidget(`id(`auth_in), `Value);
                setAuthIn(status);
                break;
  case(`auth_out):
                status = (boolean)UI::QueryWidget(`id(`auth_out), `Value);
                setAuthOut(status);
                break;
  }
 }
 if (event["EventReason"]:"" == "Activated"){
 switch((symbol)event["ID"]:nil){
  case(`add)	:
		list<string> values = getDialogValues("", "");

		if (size(values)==2 ){
		string user = values[0]:"";
		string pass = values[1]:"";
		 integer count = size((list)UI::QueryWidget(`id (`incoming_table),`Items));


		inc_auth[size(inc_auth)]= $["USER":user, "PASS":pass];
		 UI::ChangeWidget (`id (`incoming_table), `Items, getAuthItems());

//			add((list)UI::QueryWidget(`id (`incoming_table),`Items), `item(`id(count), user, pass)));
		}

		break;
  case(`edit)	:
		integer curr = tointeger( UI::QueryWidget(`id (`incoming_table),`CurrentItem) );
		if (curr!=nil){
		 string user = inc_auth[curr, "USER"]:"";  //((term)UI::QueryWidget(`id(`incoming_table), `Item(curr)))[1]:"" ;
		 string pass = inc_auth[curr, "PASS"]:"";//((term)UI::QueryWidget(`id(`incoming_table), `Item(curr)))[2]:"" ;
		 list<string> values = getDialogValues(user, pass);

                 if (size(values)==2 ){
                  string user = values[0]:"";
                  string pass = values[1]:"";

		  list<term> rows = (list<term>)UI::QueryWidget(`id (`incoming_table),`Items);
		  inc_auth[curr] = $["USER":user, "PASS":pass];
		  UI::ChangeWidget (`id (`incoming_table), `Items, getAuthItems());
                 }

		}
		break;
  case(`delete)	:
		any del = UI::QueryWidget(`id (`incoming_table),`CurrentItem);
		if (del != nil){
		 if (Popup::ContinueCancel(_("Really delete the selected item?")))
		  {
		   integer count = 0;
			map<integer, any> temp_map = $[];
			while(count<size(inc_auth)){
			 if (count<del) temp_map[count]=inc_auth[count]:nil;
				else if (count==del) {}
					else temp_map[count-1]=inc_auth[count]:nil;
			 count = count+1;
			}
			inc_auth = temp_map;
		  UI::ChangeWidget(`id(`incoming_table), `Items, getAuthItems());
		  }
		}
		break;
  }
 }

 return nil;
}

//	**************** Edit Dialog	*****************************
void initModify (string key) ``{
 foreach( map<string, any> row, (list<map<string, any> >) IscsiServerFunctions::getConfig()[curr_target]:[], {
  switch(row["KEY"]:""){
   case("Target")       :
		UI::ChangeWidget( `id(`target),`Value, (splitstring(row["VALUE"]:"", ":"))[0]:"");
                UI::ChangeWidget( `id(`target),`Enabled, false);
		UI::ChangeWidget( `id(`identifier), `Value, (splitstring(row["VALUE"]:"", ":"))[1]:"");
                UI::ChangeWidget( `id(`identifier), `Enabled, false);

                break;
   case("Lun")          :
		list<string> lun = splitstring(row["VALUE"]:"", " ");
		UI::ChangeWidget(`id(`lun), `Value, lun[0]:"");
                UI::ChangeWidget(`id(`lun),`Enabled, false);
		string full_path = (splitstring(lun[1]:"", ","))[0]:"";
		UI::ChangeWidget(`id(`path), `Value, (splitstring(full_path, "="))[1]:"" );
                break;
  }
 });
}


}
