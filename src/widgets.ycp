{

textdomain "iscsi-server";

list<string> keys = [];
string modify_record = "";


void setAuthIn(boolean status){
 UI::ChangeWidget(`id(`incoming_table),`Enabled, status );
 UI::ChangeWidget(`id(`auth_in),`Value, status );

 UI::ChangeWidget(`id(`add),`Value, status );
 UI::ChangeWidget(`id(`edit),`Value, status );
 UI::ChangeWidget(`id(`delete),`Value, status );

 if(status) UI::ChangeWidget(`id(`auth_none),`Value, !status );
}

void setAuthOut(boolean status){
 UI::ChangeWidget(`id(`user_out),`Enabled, status );
 UI::ChangeWidget(`id(`pass_out),`Enabled, status );
 UI::ChangeWidget(`id(`auth_out),`Value, status );
 if(status) UI::ChangeWidget(`id(`auth_none),`Value, !status );
}

symbol handleGlobal(string key, map event){
 if (event["EventReason"]:"" == "ValueChanged"){
 boolean status = false;
 switch((symbol)event["ID"]:nil){
  case(`auth_none):
                status = (boolean)UI::QueryWidget(`id(`auth_none), `Value);
                setAuthIn(!status);
                setAuthOut(!status);
                break;
  case(`auth_in):
                status = (boolean)UI::QueryWidget(`id(`auth_in), `Value);
                setAuthIn(status);
                break;
  case(`auth_out):
                status = (boolean)UI::QueryWidget(`id(`auth_out), `Value);
                setAuthOut(status);
                break;
  }
 }
 return nil;
}

define void initTable (string key) ``{
    keys = [];
    foreach(string key, any value, IscsiServer::config, {
     keys = add(keys, key);
    });
    TablePopup::TableInit (CWM::GetProcessedWidget (), key);
}

define list valuesTable (map descr) {
  return keys;
}

void initGlobal (string key){
 if (size(IscsiServer::auth)>0)
  {
   string user = "";
   string pass = "";

 list <string> value = splitstring(IscsiServer::auth["VALUE"]:"", " ");
 if (size(value)>0){
  user = value[0]:"";
  pass = value[1]:"";
 if (IscsiServer::auth["KEY"]:""=="IncomingUser") UI::ChangeWidget(`id(`incoming_table), `Items, [`item(`id(0), user, pass)]);
  else if (IscsiServer::auth["KEY"]:""=="OutgoingUser"){
         UI::ChangeWidget(`id(`user_out), `Value, user);
         UI::ChangeWidget(`id(`pass_out), `Value, pass);
        }
 }

  }
}

void storeGlobal(string option_id, map option_map){

 if ( size( tostring(UI::QueryWidget(`id(`pass), `Value)) )>0 ){
  switch((symbol)UI::QueryWidget(`id(`auth), `CurrentButton)){
   case(`in)    :
                IscsiServer::auth["KEY"] = "IncomingUser";
                IscsiServer::auth["VALUE"] = tostring(UI::QueryWidget(`id(`pass), `Value));
                break;
   case(`out)   :
                IscsiServer::auth["KEY"] = "OutgoingUser";
                IscsiServer::auth["VALUE"] = tostring(UI::QueryWidget(`id(`pass), `Value));
                break;
   case(`no)    :
                IscsiServer::auth = $[];
                break;
  }
 } else IscsiServer::auth = $[];
}

symbol handleTable (string table, map event){
 symbol ret = nil;
 switch((symbol)event["ID"]:nil){
  case(`_tp_add)        :
                y2internal("add");
                ret = `add;
                break;
  case(`_tp_edit)        :
                modify_record = tostring( UI::QueryWidget(`id(`_tp_table), `CurrentItem) );
                ret = `edit;
                break;
  case(`_tp_delete)        :
                if (Popup::ContinueCancel(_("Really delete this item?"))){
                 string del=tostring(UI::QueryWidget(`id(`_tp_table), `CurrentItem));
                 IscsiServer::config = filter(string key, any value, IscsiServer::config, {return (key != del);});
                    keys = [];
                    foreach(string key, any value, IscsiServer::config, {
                     keys = add(keys, key);
                    });
                 TablePopup::TableInit (CWM::GetProcessedWidget (), table);
                }
                break;
 }
 return ret;
}

boolean if_exists(string key, string value){
 boolean ret = false;
 foreach(string target, any row,IscsiServer::config, {
  foreach( map<string, any> v, (list<map<string, any> >)row, {
   if ( v["KEY"]:"" == key && v["VALUE"]:"" == value){
    ret = true;
    break;
   }
  });
 });
 return ret;
}

boolean validateAddTarget(string key, map event){
 string target = tostring( UI::QueryWidget(`id(`target), `Value)    );
 string pass = tostring(   UI::QueryWidget(`id(`pass), `Value)      );
 string lun = tostring(    UI::QueryWidget(`id(`lun), `Value)       );
 string type = "no";

 switch( (symbol)UI::QueryWidget(`id(`auth), `CurrentButton) ){
  case(`in)  : type = "in";
                break;
  case(`out) : type = "out";
                break;
 }

 if (( size(target)==0 && (Popup::Error(_("Target cannot be Empty"))==nil) ) ||
        ( if_exists("Target", target) && (Popup::Error(_("Target already exists"))==nil) )){
  UI::SetFocus(`id(`target));
  return false;
 }

 if (type != "no" && size(pass)==0){
  Popup::Error(_("Username and password cannot be empty."));
  UI::SetFocus(`id(`pass));
  return false;
 }

 if ((size(lun)==0 && (Popup::Error(_("Logical unit definition cannot be empty."))==nil))||
        ( if_exists("Lun", lun) && (Popup::Error(_("Logical unit already exists."))==nil))){
  UI::SetFocus(`id(`lun));
  return false;
 }
 return true;
}
define void storeAddTarget(string option_id, map option_map){
 string target = tostring( UI::QueryWidget(`id(`target), `Value)    );
 string pass = tostring(   UI::QueryWidget(`id(`pass), `Value)      );
 string lun = tostring(    UI::QueryWidget(`id(`lun), `Value)       );

  IscsiServer::config[target] = [
                                 $[ "KEY":"Target", "VALUE":target ],
                                 $[ "KEY":"Lun", "VALUE":lun ]
                                ];

 switch( (symbol)UI::QueryWidget(`id(`auth), `CurrentButton) ){
  case(`in)  : IscsiServer::config[target] = add(IscsiServer::config[target]:[], $[ "KEY":"IncomingUser", "VALUE":pass ]);
                break;
  case(`out) : IscsiServer::config[target] = add(IscsiServer::config[target]:[], $[ "KEY":"OutgoingUser", "VALUE":pass ]);
                break;
 }
}

define void initModify (string key) ``{
 foreach( map<string, any> row, (list<map<string, any> >) IscsiServer::config[modify_record]:[], {
  y2internal("%1", row);
  switch(row["KEY"]:""){
   case("Target")       :
                                UI::ReplaceWidget(`id(`r_target), `TextEntry(`id(`target), _("Target"), row["VALUE"]:"") );
                                UI::ChangeWidget( `id(`r_target), `Enabled, false);
                                break;
   case("Lun")          :
                                UI::ReplaceWidget(`id(`r_lun), `TextEntry(`id(`lun), _("Logical Unit Definition"), row["VALUE"]:"") );
                                break;
   case("IncomingUser") :
                                UI::ChangeWidget( `id(`auth), `CurrentButton, `in);
                                UI::ReplaceWidget(`id(`r_pass), `TextEntry(`id(`pass), _("User Password"), row["VALUE"]:"") );
                                break;
   case("OutgoingUser") :
                                UI::ChangeWidget( `id(`auth), `CurrentButton, `out);
                                UI::ReplaceWidget(`id(`r_pass), `TextEntry(`id(`pass), _("User Password"), row["VALUE"]:"") );
                                break;
  }
 });
}


}
