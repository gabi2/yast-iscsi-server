{

textdomain "iscsi-server";

//	**************** global funcions and variables	*****
string curr_target = "";
string modify_record = "";


void setAuthIn(boolean status){
 UI::ChangeWidget(`id(`incoming_table),`Enabled, status );
 UI::ChangeWidget(`id(`auth_in),`Value, status );

 UI::ChangeWidget(`id(`add),`Value, status );
 UI::ChangeWidget(`id(`edit),`Value, status );
 UI::ChangeWidget(`id(`delete),`Value, status );

 if(status) UI::ChangeWidget(`id(`auth_none),`Value, !status );
}

void setAuthOut(boolean status){
 UI::ChangeWidget(`id(`user_out),`Enabled, status );
 UI::ChangeWidget(`id(`pass_out),`Enabled, status );
 UI::ChangeWidget(`id(`auth_out),`Value, status );
 if(status) UI::ChangeWidget(`id(`auth_none),`Value, !status );
}

list<string> getIncomingValues(){
 list <string> values = [];
 if ((boolean)UI::QueryWidget(`id(`auth_in), `Value) == true){
  foreach(term row, (list<term>)UI::QueryWidget(`id(`incoming_table), `Items), {
   values=add(values, sformat("%1 %2", row[1]:"", row[2]:""));
  });
 return values;
 } else return [];
}

string getOutgoingValues(){
 if ((boolean)UI::QueryWidget(`id(`auth_out), `Value) == true){
   return sformat("%1 %2", UI::QueryWidget(`id(`user_out), `Value), UI::QueryWidget(`id(`pass_out), `Value) );
 } else return "";
}

list <string> getDialogValues(string user, string pass){

 UI::OpenDialog( `VBox(
		   `TextEntry(`id(`p_user),_("Username"), user),
		   `TextEntry(`id(`p_pass), _("Password"), pass),
		   `HBox(
			`PushButton(`id(`ok), _("OK")),
			`PushButton(`id(`cancel),_("Cancel")))
			)
                );
	boolean cycle = true;
	while(cycle){
	switch((symbol) UI::UserInput()){
	 case(`ok):
		user = tostring( UI::QueryWidget(`id(`p_user), `Value) );
		pass = tostring( UI::QueryWidget(`id(`p_pass), `Value) );
		UI::CloseDialog();
		cycle = false;
		break;
	 case(`cancel):
		cycle = false;
		UI::CloseDialog();
		break;
	 }
	}
 if (size(user)>0 && size(pass)>0) return [user, pass];
	else return [];
}

boolean if_exists(string key, string value){
 boolean ret = false;
 foreach(string target, any row,IscsiServer::config, {
  foreach( map<string, any> v, (list<map<string, any> >)row, {
   if ( v["KEY"]:"" == key && v["VALUE"]:"" == value){
    ret = true;
    break;
   }
  });
 });
 return ret;
}

//	**************** Server Dialog	*********************

void initTable (string key) ``{
    integer count = 0;
    list <term> inc_items = [];
 if (size(IscsiServer::removeKey("auth"))>0){
    foreach(string key, any value, IscsiServer::removeKey("auth"), {
     inc_items = add(inc_items, `item(`id(count), key));
     count = count + 1;
    });
  }
  UI::ChangeWidget(`id(`server), `Items, inc_items);
}

symbol handleTable (string table, map event){
 symbol ret = nil;
 if(event["EventReason"]:"" == "Activated"){
 switch((symbol)event["ID"]:nil){
  case(`add)        :
                ret = `add;
                break;
  case(`del)        :
                if (Popup::ContinueCancel(_("Really delete this item?"))){
                 integer del=tointeger( UI::QueryWidget(`id(`server), `CurrentItem) );
                 IscsiServer::config = remove(IscsiServer::config, ((term)UI::QueryWidget(`id(`server), `Item(del)))[1]:"" );
		 initTable("");
                }
                break;
  case(`edit)	:
		integer del=tointeger( UI::QueryWidget(`id(`server), `CurrentItem) );
		curr_target = ((term)UI::QueryWidget(`id(`server), `Item(del)))[1]:"";
		ret = `edit;
		break;
  }
 }
 return ret;
}

//	**************** Global Dialog	*********************
void initGlobalValues(list<map<string, any> > values){
  setAuthIn(false);
  setAuthOut(false);
   string user = "";
   string pass = "";
   list <term> inc_items = [];
   integer count = 0;
   foreach(map<string,any> auth, values, {
    if (auth["KEY"]:"" == "IncomingUser") {
	user = splitstring(auth["VALUE"]:"", " ")[0]:"";
	pass = splitstring(auth["VALUE"]:"", " ")[1]:"";
	inc_items = add(inc_items, `item(`id(count), user,pass) );
	count = count + 1;
	setAuthIn(true);
    }
    if (auth["KEY"]:"" == "OutgoingUser") {
	UI::ChangeWidget(`id(`user_out), `Value, splitstring(auth["VALUE"]:"", " ")[0]:"");
	UI::ChangeWidget(`id(`pass_out), `Value, splitstring(auth["VALUE"]:"", " ")[1]:"");
	setAuthOut(true);
    }
   });
   UI::ChangeWidget(`id(`incoming_table), `Items, inc_items );
}

void initGlobal (string key){
 if (size(curr_target)>0) initGlobalValues(IscsiServer::config[curr_target]:[]);
	else if (size(IscsiServer::config["auth"]:[])>0) initGlobalValues(IscsiServer::config["auth"]:[]);
}

void storeGlobal(string option_id, map option_map){
 if (size(curr_target)>0){
  list<map<string, any> > old = [];
  if(size(IscsiServer::config[curr_target]:[])>0){
  foreach(map<string, any> row, IscsiServer::config[curr_target]:[], {
    if ( (row["KEY"]:""=="Target")||(row["KEY"]:""=="Lun") ) old = add(old, row);
   });
  }
     IscsiServer::config[curr_target] = old;
   foreach(string row,  getIncomingValues(), {
    IscsiServer::config[curr_target] = add(IscsiServer::config[curr_target]:[], $[ "KEY":"IncomingUser", "VALUE":row ]);
   });
   string out = getOutgoingValues();
   if (size(out)>0) IscsiServer::config[curr_target] =
				add(IscsiServer::config[curr_target]:[], $[ "KEY":"OutgoingUser", "VALUE":out ]);


 } else{
   IscsiServer::config["auth"] = [];
   foreach(string row,  getIncomingValues(), {
    IscsiServer::config["auth"] = add(IscsiServer::config["auth"]:[], $[ "KEY":"IncomingUser", "VALUE":row ]);
   });
  string out = getOutgoingValues();
  if (size(out)>0) IscsiServer::config["auth"] = add(IscsiServer::config["auth"]:[], $[ "KEY":"OutgoingUser", "VALUE":out ]);
 }
}

//	************** Add Target Dialog	******************
void initAddTarget(string key){
 string target = "iqn";
 string date = ((map<string, any>)SCR::Execute(.target.bash_output, "date +%Y-%m"))["stdout"]:"";
 string domain = ((map<string, any>)SCR::Execute(.target.bash_output, "dnsdomainname"))["stdout"]:"";
 if (size(domain)>0){
  domain = (splitstring(domain, "\n"))[0]:"";
  list<string> tmp_list=splitstring(domain, ".");
  domain = sformat("%1.%2", tmp_list[1]:"", tmp_list[0]:"");
 } else domain="com.example";
 target = deletechars(sformat("%1.%2.%3", target, date, domain), "\n");
 
 UI::ChangeWidget(`id(`target), `Value, target);

 UI::ChangeWidget(`id(`lun), `Value, tostring( IscsiServer::getHighestLun() + 1));
}

void storeAddTarget(string option_id, map option_map){
 list<map<string, any> > old = [];
 string target = tostring( sformat("%1:%2",UI::QueryWidget(`id(`target), `Value), UI::QueryWidget(`id(`identifier), `Value))    );
 string lun = sformat("%1 Path=%2,Type=fileio",UI::QueryWidget(`id(`lun), `Value), UI::QueryWidget(`id(`path), `Value) );
 if(size(IscsiServer::config[target]:[])>0){
  foreach(map<string, any> row, IscsiServer::config[target]:[], {
   if ( (row["KEY"]:""!="Target")&&(row["KEY"]:""!="Lun") ) old = add(old, row);
  });
 }
  IscsiServer::config[target] = flatten([
				[
                                 $[ "KEY":"Target", "VALUE":target ],
                                 $[ "KEY":"Lun", "VALUE":lun ]
                                ], old ]);
 curr_target = target;
}

boolean validateAddTarget(string key, map event){
 string target = tostring( UI::QueryWidget(`id(`target), `Value)    );
 string lun = tostring(    UI::QueryWidget(`id(`lun), `Value)       );
 string type = "no";
 if (( size(target)==0 && (Popup::Error(_("The target cannot be empty."))==nil) ) ||
        ( if_exists("Target", target) && (Popup::Error(_("The target already exists."))==nil) )){
  UI::SetFocus(`id(`target));
  return false;
 }
 if ((size(lun)==0 && (Popup::Error(_("The logical unit definition cannot be empty."))==nil))||
        ( if_exists("Lun", lun) && (Popup::Error(_("The logical unit already exists."))==nil))){
  UI::SetFocus(`id(`lun));
  return false;
 }
 return true;
}

//	**************** Target Auth	*******************

symbol handleAuth(string key, map event){
 if (event["EventReason"]:"" == "ValueChanged"){
 boolean status = false;
 switch((symbol)event["ID"]:nil){
  case(`auth_none):
                status = (boolean)UI::QueryWidget(`id(`auth_none), `Value);
                setAuthIn(!status);
                setAuthOut(!status);
                break;
  case(`auth_in):
                status = (boolean)UI::QueryWidget(`id(`auth_in), `Value);
                setAuthIn(status);
                break;
  case(`auth_out):
                status = (boolean)UI::QueryWidget(`id(`auth_out), `Value);
                setAuthOut(status);
                break;
  }
 }
 if (event["EventReason"]:"" == "Activated"){
 switch((symbol)event["ID"]:nil){
  case(`add)	:
		list<string> values = getDialogValues("", "");

		if (size(values)==2 ){
		string user = values[0]:"";
		string pass = values[1]:"";
		 integer count = size((list)UI::QueryWidget(`id (`incoming_table),`Items));
		 UI::ChangeWidget (`id (`incoming_table), `Items,
			add((list)UI::QueryWidget(`id (`incoming_table),`Items), `item(`id(count), user, pass)));
		}

		break;
  case(`edit)	:
		integer curr = tointeger( UI::QueryWidget(`id (`incoming_table),`CurrentItem) );
		if (curr!=nil){
		 string user = ((term)UI::QueryWidget(`id(`incoming_table), `Item(curr)))[1]:"" ;
		 string pass = ((term)UI::QueryWidget(`id(`incoming_table), `Item(curr)))[2]:"" ;
		 list<string> values = getDialogValues(user, pass);

                 if (size(values)==2 ){
                  string user = values[0]:"";
                  string pass = values[1]:"";

		  list<term> rows = (list<term>)UI::QueryWidget(`id (`incoming_table),`Items);
		  rows[curr] = `item(`id(curr), user, pass);
		  UI::ChangeWidget (`id (`incoming_table), `Items, rows);
                 }

		}
		break;
  case(`delete)	:
		any del = UI::QueryWidget(`id (`incoming_table),`CurrentItem);
		if (del != nil){
		 if (Popup::ContinueCancel(_("Really delete the selected item?")))
		  {
		   integer count = 0;
		   list<term> new_rows = [];
		   foreach(term row, (list<term>)UI::QueryWidget(`id (`incoming_table),`Items), {
		    if( tointeger(((term)row[0]:nil)[0]:nil) != tointeger(del)){
		     new_rows = add(new_rows, `item(`id(count), row[1]:"", row[2]:""));
		     count = count + 1;
		    }
		   });
		  UI::ChangeWidget(`id(`incoming_table), `Items, new_rows);
		  }
		}
		break;
  }
 }

 return nil;
}

//	**************** Edit Dialog	*****************************
void initModify (string key) ``{
 foreach( map<string, any> row, (list<map<string, any> >) IscsiServer::config[curr_target]:[], {
  switch(row["KEY"]:""){
   case("Target")       :
		UI::ChangeWidget( `id(`target),`Value, (splitstring(row["VALUE"]:"", ":"))[0]:"");
                UI::ChangeWidget( `id(`target),`Enabled, false);
		UI::ChangeWidget( `id(`identifier), `Value, (splitstring(row["VALUE"]:"", ":"))[1]:"");
                UI::ChangeWidget( `id(`identifier), `Enabled, false);

                break;
   case("Lun")          :
		list<string> lun = splitstring(row["VALUE"]:"", " ");
		UI::ChangeWidget(`id(`lun), `Value, lun[0]:"");
                UI::ChangeWidget(`id(`lun),`Enabled, false);
		string full_path = (splitstring(lun[1]:"", ","))[0]:"";
		UI::ChangeWidget(`id(`path), `Value, (splitstring(full_path, "="))[1]:"" );
                break;
  }
 });
}


}
